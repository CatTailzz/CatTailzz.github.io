<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - CatTail&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>所有文章 | CatTail&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 25 Jun 2024 20:20:20 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
  <title>如何在Markdown中打印文件结构树</title>
  <link>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%AD%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%A0%91/</link>
  <pubDate>Tue, 25 Jun 2024 20:20:20 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%AD%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%A0%91/</guid>
  <description><![CDATA[sadas]]></description>
</item>
<item>
  <title>Mysql45</title>
  <link>http://localhost:1313/posts/booknotes/mysql45/mysql45/</link>
  <pubDate>Mon, 24 Jun 2024 20:03:49 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/booknotes/mysql45/mysql45/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Effective Java</title>
  <link>http://localhost:1313/posts/booknotes/effective-java/effective-java/</link>
  <pubDate>Mon, 24 Jun 2024 20:03:16 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/booknotes/effective-java/effective-java/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>CI/CD打包部署流程梳理</title>
  <link>http://localhost:1313/posts/cicd%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</link>
  <pubDate>Mon, 24 Jun 2024 19:52:43 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/cicd%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>字节码插桩技术初见</title>
  <link>http://localhost:1313/posts/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%88%9D%E8%A7%81/</link>
  <pubDate>Mon, 24 Jun 2024 19:45:06 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%88%9D%E8%A7%81/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Java日志打印最佳实践</title>
  <link>http://localhost:1313/posts/java%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
  <pubDate>Mon, 24 Jun 2024 19:44:45 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/java%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>微服务初见探索</title>
  <link>http://localhost:1313/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%9D%E8%A7%81%E6%8E%A2%E7%B4%A2/</link>
  <pubDate>Mon, 24 Jun 2024 19:33:38 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%9D%E8%A7%81%E6%8E%A2%E7%B4%A2/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>Git常见场景及解决方案</title>
  <link>http://localhost:1313/posts/git%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
  <pubDate>Mon, 24 Jun 2024 19:32:17 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/git%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
  <description><![CDATA[用git解决科研实验的版本控制 起因 原本我以为，科研这种简单的，完全自己写的💩山，是不需要版本控制的，因为我清楚的知道每一个细节。直到有一天发现以前的实验结果复现不出了😧……
需求梳理 现在我在做一个科研课题，叫Certified-Robustness。
这个科研课题下有几条实验pipeline，各pipelien之间的代码逻辑是不同的，简单来说它们是这个大方向下不同的独立子任务，只是在主任务上有一些关联。
每个pipeline之内需要做大量实验，涉及到是否用到哪个模块，考虑用git分支来管理，快速切换实验代码。由于是在服务器上开发，师弟和自己都用同一个环境，所以本地分支可以满足需求，为了保险起见也可以上传。
各个pipeline需要用到的预训练模型、数据集等考虑抽离为公共的库，实验结果也抽离为独立的库，每次跑实验做好几件事：实验动机+结果位置在笔记中备案、后台运行并记录日志防暴毙。
具体的我都写在科研项目的README.md里了]]></description>
</item>
<item>
  <title>NiFiSDK开发流程</title>
  <link>http://localhost:1313/posts/springboot%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E4%B8%BAsdk/</link>
  <pubDate>Mon, 24 Jun 2024 19:27:28 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/springboot%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E4%B8%BAsdk/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>持续化集成博客方案：Obsidian &#43; Hugo &#43; github actions</title>
  <link>http://localhost:1313/posts/buildblog/%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88obsidian-&#43;-hugo-&#43;-github-actions/</link>
  <pubDate>Sun, 23 Jun 2024 23:11:40 &#43;0800</pubDate>
  <author>CatTail</author>
  <guid>http://localhost:1313/posts/buildblog/%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88obsidian-&#43;-hugo-&#43;-github-actions/</guid>
  <description><![CDATA[需求 最近开始使用Obsidian这款笔记软件，主要看中是它的免费、拓展功能强大、本地存储。除了一些比较私人的笔记外，我更想把一些学习记录，阅读笔记等集成到博客上。正好之前接触过github actions这种自动部署发布的方式，这回打算把整个pipeline重走一遍。
在博客引擎上之前使用过vuepress和hexo，其实对于博客的需求主要是美观+简单+基础的可配置。也许是对于vuepress这种偏知识库的风格有些审美疲劳了，外加想要尝鲜，这回打算使用Hugo。大致了解了一下是用go写的，一大优势是部署很快。
如何实现 流程与方案 标准流程是先跟着指引搭建博客框架，可以在本地和github上同步一个项目，我只需要在项目的content下写我的内容就可以了。
关于内容的管理，obsidian支持按本地仓库打开一个项目进行管理，并且有git插件支持定时同步到github仓库。另一个考虑是内容中资源的管理，例如图片和音视频等，有两种选择：纯本地管理和图床管理，这里我选择了图床，优点是打包容量小，以后迁移笔记也更方便。
使用图床管理图片资源 图床我选择了腾讯云的COS，按天计费，也有其他方式，整体费用基本可忽略不计。
使用方式：
控制台搜索对象存储进入面板 在概览中，选择【创建存储桶】，进行一些简单配置，记得开启公有读 安装piggo这款图床上传工具，我是M1的mac，打开时会提示已损坏，需要在命令行输入 sudo xattr -d com.apple.quarantine /Applications/PicGo.app 解决 配置一些图床信息，其中一些密钥在【访问管理】中创建API密钥，COS存储的信息在【对象存储】-【存储桶列表】查看 在Obsidian安装Image auto upload plugin插件，基本无需配置，即可在编辑时，通过拖动or粘贴方式自动上传图片。 Hugo站点搭建 访问 Hugo的站点 ，根据网站指引在github上创建基础项目，并能够通过 hugo server 命令在本地查看 创建GitHub Pages的仓库，这里我们可以用【用户名.github.io】来命名仓库，然后把本地仓库推送到远端 在github的仓库中，进入setting-Pages，选择Build and deployment的Source为github actions，然后在本地仓库中按格式创建一个workflows的配置文件，并同步到远端仓库 在github的仓库中，进入actions，如果顺利则会看到一个正在运行的workflow，然后访问【用户名.github.io】这个网站就可以看到部署好的初始化Hugo站点了 【可选】，使用自定义域名 在Obsidian中创建文章 使用Obsidian打开本地仓库，进入hugo或者hugo的content文件夹，注意obsidian给每个仓库独立插件环境，所以有些要重新装。 创建一篇文章需要用到hugo的命令（也可以直接新建），为了在obsidian中快速创建模板文章，我们需要用到QuickAdd这个插件 在QuickAdd这款插件中，我们可以通过js脚本编写宏，也可以通过template方式更简单的配置新文件的模板，推荐js的方式，因为自定义的模板在语法上太繁琐了，用js的话就会在创建时自动使用hugo提供的模板，配置分离的方式更方便 配置完成后，可以ctrl + p 唤醒操作面板，输入QuickAdd，再选择编写好的template或macro就会执行指令了 配置手动提交 其实git插件可以设置自动提交，也可以自己手动提交，ctrl + p 唤醒的操作面板中，有git 操作可以执行。不过不习惯，还是命令行操作吧，也不要自动提交，实在太多了。 如果选择自动提交，最好在commit中提交时间戳，可以方便回滚。并且时间间隔长一些，避免海量提交。 ]]></description>
</item>
</channel>
</rss>
